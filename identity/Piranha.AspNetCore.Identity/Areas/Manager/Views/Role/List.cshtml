@using Piranha.AspNetCore.Identity
@model Piranha.AspNetCore.Identity.Models.RoleListModel
@inject IAuthorizationService Auth
@inject ManagerLocalizer Localizer
@{
    ViewBag.Title = "Roles";
    ViewBag.MenuItem = "Roles";

    var roleIsDeleted = Context.Request.Query["d"] == "1";
}

@section script {
    <script src="~/manager/identity/piranha.rolelist.js"></script>
    <script type="text/javascript">
        piranha.rolelist.load();
        @if (roleIsDeleted)
        {
            <text>
            piranha.notifications.push({
                body: "@Localizer.Security["The role has been deleted."]",
                type: "success",
                hide: true
            });
            </text>
        }
    </script>
}

<div id="rolelist">
    <div class="top">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">@Localizer.General["Settings"]</li>
                <li class="breadcrumb-item active" aria-current="page">@Localizer.General["Roles"]</li>
            </ol>
        </nav>

        <div class="container-fluid app" :class="{ ready: !loading }">
            <div class="top-nav">
                @if ((await Auth.AuthorizeAsync(User, Permissions.RolesAdd)).Succeeded)
                {
                    <a href="@Url.Action("Add", Guid.Empty)" class="btn btn-primary btn-labeled">
                        <i class="fas fa-plus"></i>@Localizer.General["Add"]
                    </a>
                }
            </div>
        </div>
    </div>

    <div class="container-fluid app" :class="{ ready: !loading }">
        <table class="table table-borderless">
            <thead>
            <tr>
                <th>@Localizer.General["Name"]</th>
                <th class="text-center"># of Users</th>
                <th class="actions one"></th>
            </tr>
            </thead>
            <tbody>
            <tr v-for="role in roles">
                <td>
                    @if ((await Auth.AuthorizeAsync(User, Permissions.RolesEdit)).Succeeded)
                    {
                        <a :href="'@Url.Content("~/manager/role/")' + role.id">{{ role.name }}</a>
                    }
                    else
                    {
                        <span class="title">{{ role.name }}</span>
                    }
                </td>
                <td class="text-center">{{ role.userCount }}</td>
                <td class="actions one">
                    @if ((await Auth.AuthorizeAsync(User, Permissions.RolesDelete)).Succeeded)
                    {
                        <a class="danger" v-on:click.prevent="remove(role)" v-if="role.normalizedName != 'SYSADMIN'">
                            <span class="fas fa-trash"></span>
                        </a>
                    }
                </td>
            </tr>
            </tbody>
        </table>
    </div>
</div>