//
// Copyright (c) 2018-2019 HÃ¥kan Edling
//
// This software may be modified and distributed under the terms
// of the MIT license. See the LICENSE file for details.
//
// http://github.com/piranhacms/piranha.core
//

tinymce.PluginManager.add('piranhalink', function (editor) {
    function showDialog() {
        var win, data, dom = editor.dom, linkElm = editor.selection.getNode();
        var href, target, text;

        if (linkElm.nodeName !== 'A')
        {
            var parentElm = editor.dom.getParent(linkElm, 'a');
            if (parentElm && parentElm.nodeName == 'A')
                linkElm = parentElm;
        }

        href = dom.getAttrib(linkElm, 'href');
        target = dom.getAttrib(linkElm, 'target');
        text = linkElm.nodeName == "A" && !linkElm.getAttribute('data-mce-object') ? linkElm.innerHTML : editor.selection.getContent();
        var isText = true;
        // Partial html and not a fully selected anchor element
        if (/</.test(text) && (!/^<a [^>]+>[^<]+<\/a>$/.test(text) || text.indexOf('href=') == -1)) {
            isText = false;
        }

        if (linkElm.nodeName == "A" && !linkElm.getAttribute('data-mce-object')) {
            data = {
                href: href,
                target: target,
                text: text
            };
        } else {
            linkElm = null;

            data = {
                text: text
            };
        }

        var editorOptions = {
            title: "Insert/edit link",
            data: data,
            initialData: data,
            body: {
                type: 'panel',
                items: [
                    {
                        type: 'label',
                        label: 'Url',
                        items: [
                            {
                                type: 'bar',
                                items: [
                                    { name: 'href', type: 'input', autofocus: true, size: 27 },
                                    { name: 'pagedialog', type: 'button', text: 'Page' },
                                    { name: 'postdialog', type: 'button', text: 'Post' },
                                    { name: 'mediadialog', type: 'button', text: 'Media' },

                                ]
                            }
                        ]
                    },
                    {
                        name: 'target',
                        type: 'selectbox',
                        label: 'Target',
                        items: [
                            { text: 'None', value: '' },
                            { text: 'New window', value: '_blank' }
                        ]
                    }
                ]
            },
            buttons: [
                {
                    type: 'cancel',
                    name: 'cancel',
                    text: 'Cancel'
                },
                {
                    type: 'submit',
                    name: 'save',
                    text: 'Save',
                    primary: true
                }
            ],
            onSubmit: function (e) {
                var data = win.getData();

                if (linkElm) {
                    dom.setAttribs(linkElm, data);
                    dom.setHTML(linkElm, data.text ? data.text : text);
                } else {
                    editor.insertContent(dom.createHTML('a', data, data.text ? data.text : text));
                }
                win.close();
            },
            onAction: function (e, sender) {
                if (sender.name === 'pagedialog') {
                    piranha.pagepicker.open(function (data) {
                        win.setData({ href: data.permalink });
                    });
                } else if (sender.name == 'postdialog') {
                    piranha.postpicker.open(function (data) {
                        win.setData({ href: data.permalink });
                    });
                } else if (sender.name == 'mediadialog') {
                    piranha.mediapicker.openCurrentFolder(function (data) {
                        win.setData({ href: data.publicUrl });
                    }, null);
                }
            }
        };

        if (isText)
            editorOptions.body.items.splice(1, 0, { name: 'text', type: 'input', label: 'Text to display' });

        piranha.win = win = editor.windowManager.open(editorOptions);
    }

    var Utils = {
        isImageFigure: function (elm) {
            return elm && elm.nodeName === 'FIGURE' && /\bimage\b/i.test(elm.className);
        },

        getAnchorElement: function (editor, selectedElm) {
            selectedElm = selectedElm || editor.selection.getNode();
            if (Utils.isImageFigure(selectedElm)) {
              return editor.dom.select('a[href]', selectedElm)[0];
            } else {
              return editor.dom.getParent(selectedElm, 'a[href]');
            }
        },

        toggleActiveState: function (editor) {
            return function (api) {
              var nodeChangeHandler = function (e) {
                return api.setActive(!editor.readonly && !!Utils.getAnchorElement(editor, e.element));
              };
              editor.on('NodeChange', nodeChangeHandler);
              return function () {
                return editor.off('NodeChange', nodeChangeHandler);
              };
            };
        }
    };

    editor.ui.registry.addToggleButton('piranhalink', {
        icon: 'link',
        tooltip: 'Insert/edit link',
        onAction: showDialog,
        onSetup: Utils.toggleActiveState(editor)
    });
});