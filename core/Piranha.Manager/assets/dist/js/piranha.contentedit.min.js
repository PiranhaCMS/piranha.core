Vue.component("region",{props:["model","content","type"],methods:{moveItem:function(e,t){this.model.items.splice(t,0,this.model.items.splice(e,1)[0])},addItem:function(){var e=this;fetch(piranha.baseUrl+"manager/api/content/region/"+this.content+"/"+this.type+"/"+this.model.meta.id).then(function(e){return e.json()}).then(function(t){e.model.items.push(t)}).catch(function(e){console.log("error:",e)})},removeItem:function(e){this.model.items.splice(this.model.items.indexOf(e),1)},updateTitle:function(e){for(var t=0;t<this.model.items.length;t++)if(this.model.items[t].uid===e.uid){this.model.items[t].title=e.title;break}}},mounted:function(){if(this.model.meta.isCollection){var e=this;sortable("#"+this.model.meta.uid,{handle:".card-header a:first-child",items:":not(.unsortable)"})[0].addEventListener("sortupdate",function(t){e.moveItem(t.detail.origin.index,t.detail.destination.index)})}},template:"<div class='row' v-if='!model.meta.isCollection'>  <div class='col-sm-12' v-if='model.meta.description != null'>    <div class='alert alert-info' v-html='model.meta.description'></div>  </div>  <div class='form-group' :class='{ \"col-sm-6\": field.meta.isHalfWidth, \"col-sm-12\": !field.meta.isHalfWidth }' v-for='field in model.items[0].fields'>    <label v-if='model.items[0].fields.length > 1'>{{ field.meta.name }}</label>    <div v-if='field.meta.description != null' v-html='field.meta.description' class='field-description small text-muted'></div>    <div class='field-body'>      <div :id='\"tb-\" + field.meta.uid' class='component-toolbar'></div>      <component v-if='field.model != null' v-bind:is='field.meta.component' v-bind:uid='field.meta.uid' v-bind:meta='field.meta' v-bind:toolbar='\"tb-\" + field.meta.uid' v-bind:model='field.model'></component>    </div>  </div></div><div v-else>  <div v-if='model.meta.description != null'>    <div class='alert alert-info' v-html='model.meta.description'></div>  </div>  <div :id='model.meta.uid' class='accordion sortable' :class='model.items.length !== 0 ? \"mb-3\" : \"\"'>    <div class='card' :key='item.uid' v-for='(item, index) in model.items'>      <div class='card-header'>        <a href='#' :data-toggle='!model.meta.expanded ? \"collapse\" : false' :data-target='\"#body\" + item.uid'>          <div class='handle'>            <i class='fas fa-ellipsis-v'></i>          </div>          {{ item.title }}        </a>        <span class='actions float-right'>          <a v-on:click.prevent='removeItem(item)' href='#' class='danger'><i class='fas fa-trash'></i></a>        </span>      </div>      <div :id='\"body\" + item.uid' :class='{ \"collapse\" : !model.meta.expanded}' :data-parent='\"#\" + model.meta.uid'>        <div class='card-body'>          <div class='row'>            <div class='form-group' :class='{ \"col-sm-6\": field.meta.isHalfWidth, \"col-sm-12\": !field.meta.isHalfWidth }' v-for='field in item.fields'>              <label>{{ field.meta.name }}</label>              <div v-if='field.meta.description != null' v-html='field.meta.description' class='field-description small text-muted'></div>              <div class='field-body'>                <div :id='\"tb-\" + field.meta.uid' class='component-toolbar'></div>                <component v-if='field.model != null' v-bind:is='field.meta.component' v-bind:uid='item.uid' v-bind:meta='field.meta' v-bind:toolbar='\"tb-\" + field.meta.uid' v-bind:model='field.model' v-on:update-title='updateTitle($event)'></component>              </div>            </div>          </div>        </div>      </div>    </div>  </div>  <a href='#' class='block-add' v-on:click.prevent='addItem()'>    <hr>    <i class='fas fa-plus-circle'></i>  </a>  <div v-if='model.items.length === 0' class='empty-info unsortable'>    <p>{{ piranha.resources.texts.emptyAddAbove }}</p>  </div></div>"}),Vue.component("post-archive",{props:["uid","id"],data:function(){return{items:[],categories:[],postTypes:[],totalPosts:0,totalPages:0,index:0,status:"all",category:piranha.resources.texts.allCategories}},methods:{load:function(e){var t=this;e||(e=0),fetch(piranha.baseUrl+"manager/api/post/list/"+t.id+"/"+e).then(function(e){return e.json()}).then(function(e){t.items=e.posts,t.categories=e.categories,t.postTypes=e.postTypes,t.totalPosts=e.totalPosts,t.totalPages=e.totalPages,t.index=e.index}).catch(function(e){console.log("error:",e)})},remove:function(e){var t=this;piranha.alert.open({title:piranha.resources.texts.delete,body:piranha.resources.texts.deletePostConfirm,confirmCss:"btn-danger",confirmIcon:"fas fa-trash",confirmText:piranha.resources.texts.delete,onConfirm:function(){fetch(piranha.baseUrl+"manager/api/post/delete/"+e).then(function(e){return e.json()}).then(function(e){piranha.notifications.push(e),t.load()}).catch(function(e){console.log("error:",e)})}})},first:function(){this.hasPrev()&&this.load(0)},prev:function(){this.hasPrev()&&this.load(this.index-1)},next:function(){this.hasNext()&&this.load(this.index+1)},last:function(){this.hasNext()&&this.load(this.totalPages-1)},hasPrev:function(){return this.index>0},hasNext:function(){return this.index<this.totalPages-1},isSelected:function(e){return(this.category===piranha.resources.texts.allCategories||e.category===this.category)&&("draft"===this.status?"draft"===e.status||"unpublished"===e.status:"scheduled"!==this.status||e.isScheduled)},selectStatus:function(e){this.status=e},selectCategory:function(e){this.category=e}},mounted:function(){this.load()},beforeDestroy:function(){},template:"<div :id='uid'>  <div class='mb-2'>    <div class='btn-group' role='group'>      <button v-on:click='selectStatus(\"all\")' class='btn btn-sm' :class='status === \"all\" ? \"btn-primary\" : \"btn-light\"' href='#'>{{ piranha.resources.texts.all }}</button>      <button v-on:click='selectStatus(\"draft\")' class='btn btn-sm' :class='status === \"draft\" ? \"btn-primary\" : \"btn-light\"' href='#'>{{ piranha.resources.texts.drafts }}</button>      <button v-on:click='selectStatus(\"scheduled\")' class='btn btn-sm' :class='status === \"scheduled\" ? \"btn-primary\" : \"btn-light\"' href='#'>{{ piranha.resources.texts.scheduled }}</button>    </div>    <div v-if='postTypes.length > 1' class='btn-group' role='group'>      <button type='button' class='btn btn-sm btn-light dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>        {{ piranha.resources.texts.all }}      </button>      <div class='dropdown-menu dropdown-menu-right'>        <a v-for='type in postTypes' href='#' class='dropdown-item'>{{ type.title }}</a>      </div>    </div>    <div v-if='categories.length > 1' class='btn-group' role='group'>      <button type='button' class='btn btn-sm dropdown-toggle' :class='category === piranha.resources.texts.allCategories ? \"btn-light\" : \"btn-primary\"' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>        {{ category }}      </button>      <div class='dropdown-menu dropdown-menu-right'>        <a v-on:click.prevent='selectCategory(piranha.resources.texts.allCategories)' href='#' class='dropdown-item'>{{ piranha.resources.texts.allCategories }}</a>        <a v-on:click.prevent='selectCategory(category.title)' v-for='category in categories' href='#' class='dropdown-item'>{{ category.title }}</a>      </div>    </div>    <div v-if='postTypes.length > 1 && piranha.permissions.posts.add' class='btn-group float-right'>      <button id='addPostGroup' class='btn btn-sm btn-primary btn-labeled dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'><i class='fas fa-plus'></i>{{ piranha.resources.texts.add }}</button>      <div class='dropdown-menu dropdown-menu-right' aria-labelledby='addPostGroup'>        <a class='dropdown-item' :href='piranha.baseUrl + type.addUrl + id + \"/\" + type.id' v-for='type in postTypes'>{{ type.title }}</a>      </div>    </div>    <a v-if='postTypes.length === 1 && piranha.permissions.posts.add' :href='piranha.baseUrl + postTypes[0].addUrl + id + \"/\" + postTypes[0].id' class='btn btn-sm btn-primary btn-labeled float-right'><i class='fas fa-plus'></i>{{ piranha.resources.texts.add }}</a>  </div>  <table class='table'>    <tbody>      <tr v-if='isSelected(post)' v-for='post in items' :class='post.status'>        <td>          <a :href='piranha.baseUrl + post.editUrl + post.id'>{{ post.title }}</a>           <small v-if='post.status === \"published\" || post.status === \"draft\"' class='text-muted'>| Published: {{ post.published }}</small>          <small v-else-if='post.status === \"unpublished\"' class='text-muted'>| Unpublished</small>          <span v-if='post.status === \"draft\"' class='badge badge-info float-right'>{{ piranha.resources.texts.draft }}</span>        </td>        <td>          {{ post.typeName }}        </td>        <td>          {{ post.category }}        </td>        <td class='actions one'>          <a v-if='piranha.permissions.posts.delete' v-on:click.prevent='remove(post.id)' class='danger'><i class='fas fa-trash'></i></a>        </td>      </tr>    </tbody>  </table>  <nav v-if='totalPages > 1'>    <ul class='pagination justify-content-center'>      <li class='page-item' :class='{ disabled: !hasPrev() }'><button v-on:click.prevent='first()' :disabled='!hasPrev()' class='page-link' href='#'><i class='fas fa-angle-double-left'></i></i></button></li>      <li class='page-item' :class='{ disabled: !hasPrev() }'><button v-on:click.prevent='prev()' :disabled='!hasPrev()' class='page-link' href='#'><i class='fas fa-chevron-left'></i></button></li>      <li class='page-item disabled'><span class='page-link'>{{ index + 1}} / {{ totalPages }}</span></li>      <li class='page-item' :class='{ disabled: !hasNext() }'><button v-on:click.prevent='next()' :disabled='!hasNext()' class='page-link' href='#'><i class='fas fa-chevron-right'></i></button></li>      <li class='page-item' :class='{ disabled: !hasNext() }'><button v-on:click.prevent='last()' :disabled='!hasNext()' class='page-link' href='#'><i class='fas fa-angle-double-right'></i></button></li>    </ul>  </nav></div>"}),Vue.component("block-group",{props:["uid","toolbar","model"],methods:{selectItem:function(e){for(var t=0;t<this.model.items.length;t++)this.model.items[t]==e?this.model.items[t].isActive=!0:this.model.items[t].isActive=!1},removeItem:function(e){var t=e.isActive,i=this.model.items.indexOf(e);this.model.items.splice(i,1),t&&this.selectItem(this.model.items[Math.min(i,this.model.items.length-1)])},addGroupBlock:function(e,t){var i=this;fetch(piranha.baseUrl+"manager/api/content/block/"+e).then(function(e){return e.json()}).then(function(e){i.model.items.push(e.body),i.selectItem(e.body)}).catch(function(e){console.log("error:",e)})},updateTitle:function(e){for(var t=0;t<this.model.items.length;t++)if(this.model.items[t].meta.uid===e.uid){this.model.items[t].meta.title=e.title;break}},toggleHeader:function(){this.model.meta.showHeader=!this.model.meta.showHeader},moveItem:function(e,t){this.model.items.splice(t,0,this.model.items.splice(e,1)[0])}},mounted:function(){var e=this;sortable("#"+this.uid+" .list-group",{items:":not(.unsortable)"})[0].addEventListener("sortupdate",function(t){e.moveItem(t.detail.origin.index,t.detail.destination.index)})},beforeDestroy:function(){},template:"<div :id='uid' class='block-group'>  <div v-if='model.fields.length > 0' class='actions block-group-actions'>    <button v-on:click.prevent='toggleHeader()' class='btn btn-sm' :class='{ selected: model.meta.showHeader }'>      <i class='fas fa-list'></i>    </button>  </div>  <div class='block-group-header'>    <div v-if='model.meta.showHeader' class='row'>      <div class='form-group' :class='{ \"col-sm-6\": field.meta.isHalfWidth, \"col-sm-12\": !field.meta.isHalfWidth }' v-for='field in model.fields'>        <label>{{ field.meta.name }}</label>        <div v-if='field.meta.description != null' v-html='field.meta.description' class='field-description small text-muted'></div>        <component v-bind:is='field.meta.component' v-bind:uid='field.meta.uid' v-bind:meta='field.meta' v-bind:toolbar='toolbar' v-bind:model='field.model'></component>      </div>    </div>  </div>  <div class='row'>    <div class='col-md-4'>      <div class='list-group list-group-flush'>        <div class='list-group-item' :class='{ active: child.isActive }' v-for='child in model.items' v-bind:key='child.meta.uid'>          <a href='#' v-on:click.prevent='selectItem(child)'>            <div class='handle'>              <i class='fas fa-ellipsis-v'></i>            </div>            {{ child.meta.title }}          </a>          <span class='actions'>            <a v-on:click.prevent='removeItem(child)' href='#' class='danger'><i class='fas fa-trash'></i></a>          </span>        </div>      </div>      <button v-on:click.prevent='piranha.blockpicker.open(addGroupBlock, 0, model.type)' class='btn btn-sm btn-primary btn-labeled mt-3'><i class='fas fa-plus'></i>{{ piranha.resources.texts.add }}</button>    </div>    <div class='col-md-8'>      <div v-if='model.items.length === 0' class='empty-info unsortable'>        <p>{{ piranha.resources.texts.emptyAddLeft }}</p>      </div>      <div v-for='child in model.items' v-if='child.isActive' :class='\"block \" + child.meta.component'>        <component v-bind:is='child.meta.component' v-bind:uid='child.meta.uid' v-bind:toolbar='toolbar' v-bind:model='child.model' v-on:update-title='updateTitle($event)'></component>      </div>    </div>  </div></div>"}),Vue.component("block-group-horizontal",{props:["uid","toolbar","model"],methods:{removeItem:function(e){var t=this.model.items.indexOf(e);this.model.items.splice(t,1)},addGroupBlock:function(e,t){var i=this;fetch(piranha.baseUrl+"manager/api/content/block/"+e).then(function(e){return e.json()}).then(function(e){sortable("#"+i.uid+" .block-group-items","destroy"),i.model.items.push(e.body),Vue.nextTick(function(){sortable("#"+i.uid+" .block-group-items",{handle:".handle",items:":not(.unsortable)",placeholderClass:"col sortable-placeholder"})[0].addEventListener("sortupdate",function(e){i.moveItem(e.detail.origin.index,e.detail.destination.index)})})}).catch(function(e){console.log("error:",e)})},toggleHeader:function(){this.model.meta.showHeader=!this.model.meta.showHeader},moveItem:function(e,t){this.model.items.splice(t,0,this.model.items.splice(e,1)[0])}},mounted:function(){var e=this;sortable("#"+this.uid+" .block-group-items",{handle:".handle",items:":not(.unsortable)",placeholderClass:"col sortable-placeholder"})[0].addEventListener("sortupdate",function(t){e.moveItem(t.detail.origin.index,t.detail.destination.index)})},beforeDestroy:function(){},template:"<div :id='uid' class='block-group'>  <div class='actions block-group-actions'>    <button v-on:click.prevent='piranha.blockpicker.open(addGroupBlock, 0, model.type)' class='btn btn-sm add'>      <i class='fas fa-plus'></i>    </button>    <button v-on:click.prevent='toggleHeader()' v-if='model.fields.length > 0' class='btn btn-sm' :class='{ selected: model.meta.showHeader }'>      <i class='fas fa-list'></i>    </button>  </div>  <div v-if='model.meta.showHeader && model.fields.length > 0' class='block-group-header'>    <div class='row'>      <div class='form-group' :class='{ \"col-sm-6\": field.meta.isHalfWidth, \"col-sm-12\": !field.meta.isHalfWidth }' v-for='field in model.fields'>        <label>{{ field.meta.name }}</label>        <div v-if='field.meta.description != null' v-html='field.meta.description' class='field-description small text-muted'></div>        <component v-bind:is='field.meta.component' v-bind:uid='field.meta.uid' v-bind:meta='field.meta' v-bind:toolbar='toolbar' v-bind:model='field.model'></component>      </div>    </div>  </div>  <div class='row block-group-items'>    <div v-if='model.items.length === 0' class='col'>      <div class='empty-info unsortable'>        <p>{{ piranha.resources.texts.emptyAddAbove }}</p>      </div>    </div>    <div v-for='child in model.items' v-bind:key='child.meta.uid' class='col'>      <div :class='\"block \" + child.meta.component'>        <div class='block-header'>          <div class='title'>            <i :class='child.meta.icon'></i><strong>{{ child.meta.name }}</strong>          </div>          <div class='actions'>            <span class='btn btn-sm handle'>              <i class='fas fa-ellipsis-v'></i>            </span>            <button v-on:click.prevent='removeItem(child)' class='btn btn-sm danger' tabindex='-1'>              <i class='fas fa-trash'></i>            </button>          </div>        </div>        <component v-bind:is='child.meta.component' v-bind:uid='child.meta.uid' v-bind:toolbar='toolbar' v-bind:model='child.model'></component>      </div>    </div>  </div></div>"}),Vue.component("block-group-vertical",{props:["uid","toolbar","model"],methods:{collapseItem:function(e){e.meta.isCollapsed=!e.meta.isCollapsed},removeItem:function(e){var t=this.model.items.indexOf(e);this.model.items.splice(t,1)},addGroupBlock:function(e,t){var i=this;fetch(piranha.baseUrl+"manager/api/content/block/"+e).then(function(e){return e.json()}).then(function(e){sortable("#"+i.uid+" .block-group-items","destroy"),i.model.items.splice(t,0,e.body),Vue.nextTick(function(){sortable("#"+i.uid+" .block-group-items",{handle:".handle",items:":not(.unsortable)",placeholderClass:"sortable-placeholder"})[0].addEventListener("sortupdate",function(e){i.moveItem(e.detail.origin.index,e.detail.destination.index)})})}).catch(function(e){console.log("error:",e)})},toggleHeader:function(){this.model.meta.showHeader=!this.model.meta.showHeader},moveItem:function(e,t){this.model.items.splice(t,0,this.model.items.splice(e,1)[0])}},mounted:function(){var e=this;sortable("#"+this.uid+" .block-group-items",{handle:".handle",items:":not(.unsortable)",placeholderClass:"sortable-placeholder"})[0].addEventListener("sortupdate",function(t){e.moveItem(t.detail.origin.index,t.detail.destination.index)})},beforeDestroy:function(){},template:"<div :id='uid' class='block-group'>  <div class='actions block-group-actions'>    <button v-on:click.prevent='toggleHeader()' v-if='model.fields.length > 0' class='btn btn-sm' :class='{ selected: model.meta.showHeader }'>      <i class='fas fa-list'></i>    </button>  </div>  <div v-if='model.meta.showHeader && model.fields.length > 0' class='block-group-header'>    <div class='row'>      <div class='form-group' :class='{ \"col-sm-6\": field.meta.isHalfWidth, \"col-sm-12\": !field.meta.isHalfWidth }' v-for='field in model.fields'>        <label>{{ field.meta.name }}</label>        <div v-if='field.meta.description != null' v-html='field.meta.description' class='field-description small text-muted'></div>        <component v-bind:is='field.meta.component' v-bind:uid='field.meta.uid' v-bind:meta='field.meta' v-bind:toolbar='toolbar' v-bind:model='field.model'></component>      </div>    </div>  </div>  <div class='block-group-items'>    <a href='#' class='block-add unsortable' v-on:click.prevent='piranha.blockpicker.open(addGroupBlock, 0, model.type)'>      <hr>      <i class='fas fa-plus-circle'></i>    </a>    <div v-if='model.items.length === 0' class='col'>      <div class='empty-info unsortable'>        <p>{{ piranha.resources.texts.emptyAddAbove }}</p>      </div>    </div>    <div v-for='(child, index) in model.items' v-bind:key='child.meta.uid'>      <div :class='\"block \" + child.meta.component + \" \" + (child.meta.isCollapsed ? \"collapsed\" : \"\")'>        <div class='block-header'>          <div class='title'>            <i :class='child.meta.icon'></i><strong>{{ child.meta.name }}</strong>          </div>          <div class='actions'>            <span v-on:click.prevent='collapseItem(child)' class='btn btn-sm'>              <i v-if='child.meta.isCollapsed' class='fas fa-chevron-down'></i>              <i v-else class='fas fa-chevron-up'></i>            </span>            <span class='btn btn-sm handle'>              <i class='fas fa-ellipsis-v'></i>            </span>            <button v-on:click.prevent='removeItem(child)' class='btn btn-sm danger' tabindex='-1'>              <i class='fas fa-trash'></i>            </button>          </div>        </div>        <component v-bind:is='child.meta.component' v-bind:uid='child.meta.uid' v-bind:toolbar='toolbar' v-bind:model='child.model'></component>      </div>      <a href='#' class='block-add unsortable' v-on:click.prevent='piranha.blockpicker.open(addGroupBlock, index + 1, model.type)'>        <hr>        <i class='fas fa-plus-circle'></i>      </a>    </div>  </div></div>"}),Vue.component("generic-block",{props:["uid","toolbar","model"],template:"<div class='block-body'>  <div class='row'>    <div class='form-group' :class='{ \"col-sm-6\": field.meta.isHalfWidth, \"col-sm-12\": !field.meta.isHalfWidth }' v-for='field in model'>      <label>{{ field.meta.name }}</label>      <div v-if='field.meta.description != null' v-html='field.meta.description' class='field-description small text-muted'></div>      <component v-bind:is='field.meta.component' v-bind:uid='field.meta.uid' v-bind:meta='field.meta' v-bind:toolbar='toolbar' v-bind:model='field.model'></component>    </div>  </div></div>"}),Vue.component("html-block",{props:["uid","toolbar","model"],data:function(){return{body:this.model.body.value}},methods:{onBlur:function(e){this.model.body.value=e.target.innerHTML},onChange:function(e){this.model.body.value=e}},computed:{isEmpty:function(){return piranha.utils.isEmptyHtml(this.model.body.value)}},mounted:function(){piranha.editor.addInline(this.uid,this.toolbar,this.onChange)},beforeDestroy:function(){piranha.editor.remove(this.uid)},template:"<div class='block-body' :class='{ empty: isEmpty }'>  <div contenteditable='true' :id='uid' spellcheck='false' v-html='body' v-on:blur='onBlur'></div></div>"}),Vue.component("html-column-block",{props:["uid","toolbar","model"],data:function(){return{column1:this.model.column1.value,column2:this.model.column2.value}},methods:{onBlurCol1:function(e){this.model.column1.value=e.target.innerHTML},onBlurCol2:function(e){this.model.column2.value=e.target.innerHTML},onChangeCol1:function(e){this.model.column1.value=e},onChangeCol2:function(e){this.model.column2.value=e}},computed:{isEmpty1:function(){return piranha.utils.isEmptyHtml(this.model.column1.value)},isEmpty2:function(){return piranha.utils.isEmptyHtml(this.model.column2.value)}},mounted:function(){piranha.editor.addInline(this.uid+1,this.toolbar,this.onChangeCol1),piranha.editor.addInline(this.uid+2,this.toolbar,this.onChangeCol2)},beforeDestroy:function(){piranha.editor.remove(this.uid+1),piranha.editor.remove(this.uid+2)},template:"<div class='block-body' class='row'>  <div class='col-md-6'>    <div :class='{ empty: isEmpty1 }'>      <div :id='uid + 1' contenteditable='true' spellcheck='false' v-html='column1' v-on:blur='onBlurCol1'></div>    </div>  </div>  <div class='col-md-6'>    <div :class='{ empty: isEmpty2 }'>      <div :id='uid + 2' contenteditable='true' spellcheck='false' v-html='column2' v-on:blur='onBlurCol2'></div>    </div>  </div></div>"}),Vue.component("image-block",{props:["uid","model"],methods:{clear:function(){},select:function(){null!=this.model.body.media?piranha.mediapicker.open(this.update,"Image",this.model.body.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,"Image")},remove:function(){this.model.body.id=null,this.model.body.media=null},update:function(e){"Image"===e.type?(this.model.body.id=e.id,this.model.body.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.body.media.filename})):console.log("No image was selected")}},computed:{isEmpty:function(){return null==this.model.body.media},mediaUrl:function(){return null!=this.model.body.media?piranha.utils.formatUrl(this.model.body.media.publicUrl):piranha.utils.formatUrl("~/manager/assets/img/empty-image.png")}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No image selected"}},template:"<div class='block-body has-media-picker' :class='{ empty: isEmpty }'>  <img :src='mediaUrl'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        &nbsp;      </div>      <div class='card-body' v-else>        {{ model.body.media.filename }}      </div>    </div>  </div></div>"}),Vue.component("quote-block",{props:["uid","model"],methods:{onBlur:function(e){this.model.body.value=e.target.innerText;var t=this.model.body.value.replace(/(<([^>]+)>)/gi,"");t.length>40&&(t=t.substring(0,40)+"..."),this.$emit("update-title",{uid:this.uid,title:t})}},computed:{isEmpty:function(){return piranha.utils.isEmptyText(this.model.body.value)}},template:"<div class='block-body' :class='{ empty: isEmpty }'>  <i class='fas fa-quote-right quote'></i>  <p class='lead' contenteditable='true' spellcheck='false' v-html='model.body.value' v-on:blur='onBlur'></pre></div>"}),Vue.component("separator-block",{props:["model"],template:"<div class='block-body'>  <hr></div>"}),Vue.component("text-block",{props:["uid","model"],methods:{onBlur:function(e){this.model.body.value=e.target.innerHTML;var t=this.model.body.value.replace(/(<([^>]+)>)/gi,"");t.length>40&&(t=t.substring(0,40)+"..."),this.$emit("update-title",{uid:this.uid,title:t})}},computed:{isEmpty:function(){return piranha.utils.isEmptyText(this.model.body.value)}},template:"<div class='block-body' :class='{ empty: isEmpty }'>  <pre contenteditable='true' spellcheck='false' v-html='model.body.value' v-on:blur='onBlur'></pre></div>"}),Vue.component("missing-block",{props:["model"],template:"<div class='alert alert-danger text-center' role='alert'>No component registered for <code>{{ model.type }}</code></div>"}),Vue.component("audio-block",{props:["uid","model"],methods:{clear:function(){},select:function(){null!=this.model.body.media?piranha.mediapicker.open(this.update,"Audio",this.model.body.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,"Audio")},remove:function(){this.model.body.id=null,this.model.body.media=null},update:function(e){"Audio"===e.type?(this.model.body.id=e.id,this.model.body.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.body.media.filename})):console.log("No video was selected")}},computed:{isEmpty:function(){return null==this.model.body.media},mediaUrl:function(){if(null!=this.model.body.media)return piranha.utils.formatUrl(this.model.body.media.publicUrl)}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No audio selected"}},template:"<div class='block-body has-media-picker d-flex align-items-center' :class='{ empty: isEmpty }'>  <audio class='flex-grow-1 w-50' :src='mediaUrl' controls></audio>  <div class='media-picker slide-in'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        &nbsp;      </div>      <div class='card-body' v-else>        {{ model.body.media.filename }}      </div>    </div>  </div></div>"}),Vue.component("video-block",{props:["uid","model"],methods:{clear:function(){},select:function(){null!=this.model.body.media?piranha.mediapicker.open(this.update,"Video",this.model.body.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,"Video")},remove:function(){this.model.body.id=null,this.model.body.media=null},update:function(e){"Video"===e.type?(this.model.body.id=e.id,this.model.body.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.body.media.filename})):console.log("No video was selected")}},computed:{isEmpty:function(){return null==this.model.body.media},mediaUrl:function(){if(null!=this.model.body.media)return piranha.utils.formatUrl(this.model.body.media.publicUrl)}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No video selected"}},template:"<div class='block-body has-media-picker' :class='{ empty: isEmpty }'>  <video class='w-100 mx-100' :src='mediaUrl' controls></video>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        &nbsp;      </div>      <div class='card-body' v-else>        {{ model.body.media.filename }}      </div>    </div>  </div></div>"}),Vue.component("audio-field",{props:["uid","model","meta"],methods:{clear:function(){},select:function(){null!=this.model.media?piranha.mediapicker.open(this.update,"Audio",this.model.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,"Audio")},remove:function(){this.model.id=null,this.model.media=null},update:function(e){"Audio"===e.type?(this.model.id=e.id,this.model.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.media.filename})):console.log("No audio was selected")}},computed:{isEmpty:function(){return null==this.model.media}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No audio selected"}},template:"<div class='media-field' :class='{ empty: isEmpty }'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        <span v-if='meta.placeholder != null' class='text-secondary'>{{ meta.placeholder }}</span>        <span v-if='meta.placeholder == null' class='text-secondary'>&nbsp;</span>      </div>      <div class='card-body' v-else>        <a href='#' v-on:click.prevent='piranha.preview.open(model.id)'>{{ model.media.filename }}</a>      </div>    </div>  </div></div>"}),Vue.component("checkbox-field",{props:["uid","model","meta"],template:"<div class='form-group form-check'>  <input type='checkbox' class='form-check-input' :id='meta.uid' v-model='model.value'>  <label class='form-check-label' :for='meta.uid'>{{ meta.placeholder}}</label></div>"}),Vue.component("date-field",{props:["uid","model","meta"],template:"<datepicker v-on:closed='onClosed($event)' v-model='model.value' :format='_options.format' :monday-first='_options.mondayFirst' :typeable='_options.typeable' :bootstrap-styling='_options.bootstrapStyling'></datepicker>",components:{datepicker:vuejsDatepicker},methods:{onClosed:function(){var e=this.model.value,t=e.getFullYear()+"-"+(e.getMonth()<9?"0":"")+(e.getMonth()+1)+"-"+(e.getDate()<10?"0":"")+e.getDate();this.model.value=t}},created:function(){this._options={bootstrapStyling:bootstrapStyling=!0,mondayFirst:mondayFirst=!0,format:format="yyyy-MM-dd",typeable:typeable=!0}}}),Vue.component("document-field",{props:["uid","model","meta"],methods:{clear:function(){},select:function(){null!=this.model.media?piranha.mediapicker.open(this.update,"Document",this.model.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,"Document")},remove:function(){this.model.id=null,this.model.media=null},update:function(e){"Document"===e.type?(this.model.id=e.id,this.model.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.media.filename})):console.log("No document was selected")}},computed:{isEmpty:function(){return null==this.model.media}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No document selected"}},template:"<div class='media-field' :class='{ empty: isEmpty }'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        <span v-if='meta.placeholder != null' class='text-secondary'>{{ meta.placeholder }}</span>        <span v-if='meta.placeholder == null' class='text-secondary'>&nbsp;</span>      </div>      <div class='card-body' v-else>        <a href='#' v-on:click.prevent='piranha.preview.open(model.id)'>{{ model.media.filename }}</a>      </div>    </div>  </div></div>"}),Vue.component("html-field",{props:["uid","toolbar","model"],data:function(){return{body:this.model.value}},methods:{onBlur:function(e){this.model.value=tinyMCE.activeEditor.getContent();var t=this.model.value.replace(/(<([^>]+)>)/gi,"");t.length>40&&(t=t.substring(0,40)+"..."),this.$emit("update-title",{uid:this.uid,title:t})},onChange:function(e){this.model.value=e;var t=this.model.value.replace(/(<([^>]+)>)/gi,"");t.length>40&&(t=t.substring(0,40)+"..."),this.$emit("update-title",{uid:this.uid,title:t})}},computed:{isEmpty:function(){return piranha.utils.isEmptyHtml(this.model.value)}},mounted:function(){piranha.editor.addInline(this.uid,this.toolbar,this.onChange)},beforeDestroy:function(){piranha.editor.remove(this.uid)},template:"<div class='field html-field' :class='{ empty: isEmpty }'>  <div contenteditable='true' :id='uid' spellcheck='false' v-html='body' v-on:blur='onBlur'></div></div>"}),Vue.component("image-field",{props:["uid","model","meta"],methods:{clear:function(){},select:function(){null!=this.model.media?piranha.mediapicker.open(this.update,"Image",this.model.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,"Image")},remove:function(){this.model.id=null,this.model.media=null},update:function(e){"Image"===e.type?(this.model.id=e.id,this.model.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.media.filename})):console.log("No image was selected")}},computed:{isEmpty:function(){return null==this.model.media}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No image selected"}},template:"<div class='media-field' :class='{ empty: isEmpty }'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        <span v-if='meta.placeholder != null' class='text-secondary'>{{ meta.placeholder }}</span>        <span v-if='meta.placeholder == null' class='text-secondary'>&nbsp;</span>      </div>      <div class='card-body' v-else>        <a href='#' v-on:click.prevent='piranha.preview.open(model.id)'>{{ model.media.filename }}</a>      </div>    </div>  </div></div>"}),Vue.component("markdown-field",{props:["uid","model"],data:function(){return{body:this.model.value}},methods:{update:function(e){this.model.value=e}},computed:{isEmpty:function(){return null==this.model.value||""===this.model.value}},mounted:function(){piranha.editor.addInlineMarkdown(this.uid,this.model.value,this.update)},beforeDestroy:function(){piranha.editor.remove(this.uid)},template:"<div class='markdown-field' :class='{ empty: isEmpty }'>  <textarea :id='uid' spellcheck='false' v-html='model.value'></textarea>  <div class='markdown-preview'></div></div>"}),Vue.component("media-field",{props:["uid","model","meta"],methods:{clear:function(){},select:function(){null!=this.model.media?piranha.mediapicker.open(this.update,null,this.model.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,null)},remove:function(){this.model.id=null,this.model.media=null},update:function(e){this.model.id=e.id,this.model.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.media.filename})}},computed:{isEmpty:function(){return null==this.model.media}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No media selected"}},template:"<div class='media-field' :class='{ empty: isEmpty }'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        <span v-if='meta.placeholder != null' class='text-secondary'>{{ meta.placeholder }}</span>        <span v-if='meta.placeholder == null' class='text-secondary'>&nbsp;</span>      </div>      <div class='card-body' v-else>        <a href='#' v-on:click.prevent='piranha.preview.open(model.id)'>{{ model.media.filename }}</a>      </div>    </div>  </div></div>"}),Vue.component("missing-field",{props:["meta","model"],template:"<div class='alert alert-danger text-center' role='alert'>No component registered for <code>{{ meta.type }}</code></div>"}),Vue.component("number-field",{props:["uid","model","meta"],template:"<input class='form-control' type='text' :placeholder='meta.placeholder' v-model='model.value'>"}),Vue.component("page-field",{props:["uid","model","meta"],methods:{select:function(){var e=null;this.model.page?e=this.model.page.siteId:piranha.pageedit&&(e=piranha.pageedit.siteId),piranha.pagepicker.open(this.update,e)},remove:function(){this.model.id=null,this.model.page=null},update:function(e){this.model.id=e.id,this.model.page=e,this.$emit("update-title",{uid:this.uid,title:this.model.page.title})}},computed:{isEmpty:function(){return null==this.model.page}},mounted:function(){this.model.getTitle=function(){return null!=this.model.page?this.model.page.title:"No page selected"}},template:"<div class='media-field' :class='{ empty: isEmpty }'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        <span v-if='meta.placeholder != null' class='text-secondary'>{{ meta.placeholder }}</span>        <span v-if='meta.placeholder == null' class='text-secondary'>&nbsp;</span>      </div>      <div class='card-body' v-else>        <a href='#'>{{ model.page.title }}</a>      </div>    </div>  </div></div>"}),Vue.component("post-field",{props:["uid","model","meta"],methods:{select:function(){piranha.postpicker.open(this.update)},remove:function(){this.model.id=null,this.model.post=null},update:function(e){this.model.id=e.id,this.model.post=e,this.$emit("update-title",{uid:this.uid,title:this.model.post.title})}},computed:{isEmpty:function(){return null==this.model.post}},mounted:function(){this.model.getTitle=function(){return null!=this.model.post?this.model.post.title:"No post selected"}},template:"<div class='media-field' :class='{ empty: isEmpty }'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        <span v-if='meta.placeholder != null' class='text-secondary'>{{ meta.placeholder }}</span>        <span v-if='meta.placeholder == null' class='text-secondary'>&nbsp;</span>      </div>      <div class='card-body' v-else>        <a href='#'>{{ model.post.title }}</a>      </div>    </div>  </div></div>"}),Vue.component("readonly-field",{props:["uid","model","meta"],template:"<div class='alert alert-secondary mb-0'>  <pre class='mb-0'>{{ model.value }}</pre></div>"}),Vue.component("string-field",{props:["uid","model","meta"],methods:{update:function(){this.meta.notifyChange&&(console.log("update field: ",{uid:this.uid,title:this.model.value}),this.$emit("update-field",{uid:this.uid,title:this.model.value}))}},template:"<input class='form-control' type='text' :placeholder='meta.placeholder' v-model='model.value' v-on:change='update()'>"}),Vue.component("text-field",{props:["uid","model","meta"],template:"<textarea class='form-control' rows='4' :placeholder='meta.placeholder' v-model='model.value'></textarea>"}),Vue.component("video-field",{props:["uid","model","meta"],methods:{clear:function(){},select:function(){null!=this.model.media?piranha.mediapicker.open(this.update,"Video",this.model.media.folderId):piranha.mediapicker.openCurrentFolder(this.update,"Video")},remove:function(){this.model.id=null,this.model.media=null},update:function(e){"Video"===e.type?(this.model.id=e.id,this.model.media=e,this.$emit("update-title",{uid:this.uid,title:this.model.media.filename})):console.log("No video was selected")}},computed:{isEmpty:function(){return null==this.model.media}},mounted:function(){this.model.getTitle=function(){return null!=this.model.media?this.model.media.filename:"No video selected"}},template:"<div class='media-field' :class='{ empty: isEmpty }'>  <div class='media-picker'>    <div class='btn-group float-right'>      <button v-on:click.prevent='select' class='btn btn-primary text-center'>        <i class='fas fa-plus'></i>      </button>      <button v-on:click.prevent='remove' class='btn btn-danger text-center'>        <i class='fas fa-times'></i>      </button>    </div>    <div class='card text-left'>      <div class='card-body' v-if='isEmpty'>        <span v-if='meta.placeholder != null' class='text-secondary'>{{ meta.placeholder }}</span>        <span v-if='meta.placeholder == null' class='text-secondary'>&nbsp;</span>      </div>      <div class='card-body' v-else>        <a href='#' v-on:click.prevent='piranha.preview.open(model.id)'>{{ model.media.filename }}</a>      </div>    </div>  </div></div>"}),Vue.component("select-field",{props:["uid","model","meta"],methods:{update:function(){this.meta.notifyChange&&(console.log("update field: ",{uid:this.uid,title:this.meta.options[this.model.value]}),this.$emit("update-field",{uid:this.uid,title:this.meta.options[this.model.value]}))}},template:"<select class='form-control' v-model='model.value' v-on:change='update()'><option v-for='(name, value) in meta.options' v-bind:value='value'>{{ name }}</option></select>"});