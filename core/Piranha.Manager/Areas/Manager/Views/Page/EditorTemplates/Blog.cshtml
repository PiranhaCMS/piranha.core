@using Piranha
@using Piranha.Areas.Manager.Models
@using Piranha.Manager
@model Piranha.Areas.Manager.Models.PageEditModel
@inject IApi Api
@{
    var blogModel = PostListModel.GetByBlogId(Api, Model.Id);
}
<div class="row">
    <div class="col-sm-12 custom-editor-list">
        <table id="post-table" class="table table-striped table-main">
            <tbody>
                <tr>
                    <td colspan="4" style="border-top:none">
                        @if ((await Authorization.AuthorizeAsync(User, Permission.PostsAdd)).Succeeded) {
                            <div class="btn-group pull-right">
                                <button type="button" class="btn btn-labeled btn-primary btn-sm" data-toggle="dropdown">
                                    <span class="btn-label">
                                        <i class="glyphicon glyphicon-plus"></i>
                                    </span>Add a new post
                                </button>
                                <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
                                    <span class="caret"></span>
                                    <span class="sr-only">Toggle Dropdown</span>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-right" role="menu">
                                    @foreach (var type in blogModel.PostTypes) {
                                        <li><a href="@Url.Action("Add", "Post", new { type = type.Id, blogId = Model.Id })">@type.Title</a></li>
                                    }
                                </ul>
                            </div>
                        }
                        <div class="table-filter" data-table="#post-table">
                            <button class="btn btn-sm btn-primary" data-filter="">All</button>
                            <button class="btn btn-sm" data-filter="draft">Drafts</button>
                            <button class="btn btn-sm" data-filter="scheduled">Scheduled</button>
                            <select id="blog-type-filter" class="form-control input-sm" style="display:inline;width:auto">
                                <option value="">All post types</option>
                                @foreach (var type in blogModel.CurrentPostTypes) {
                                    <option value="@type.Id">@type.Title</option>
                                }
                            </select>
                            <select id="blog-category-filter" class="form-control input-sm" style="display:inline;width:auto">
                                <option value="">All categories</option>
                                @foreach (var category in blogModel.CurrentCategories) {
                                    <option value="@category.Id">@category.Title</option>
                                }
                            </select>
                            <input id="blog-search" class="form-control input-block inline-search" placeholder="Search for a post in the archive">                        
                        </div>
                    </td>
                </tr>
                @foreach (var post in blogModel.Posts) {
                    var status = "";
                    if (!post.Published.HasValue) {
                        status = "draft";
                    } else if (post.Published.Value > DateTime.Now) {
                        status = "scheduled";
                    }

                    <tr class="@status" data-category="@post.CategoryId" data-posttype="@post.TypeId">
                        <td>
                            @if ((await Authorization.AuthorizeAsync(User, Permission.PostsEdit)).Succeeded) {
                                <a href="@Url.Action("Edit", "Post", new { id = post.Id })">@post.Title</a>
                            } else {
                                <text>@post.Title</text>                                
                            }
                            @if (post.Published.HasValue) {
                                <small class="post-meta">
                                        <text>Published: @post.Published.Value.ToString("yyyy-MM-dd")</text>
                                </small>
                            }
                        </td>
                        <td>@post.TypeName</td>
                        <td>@post.Category</td>
                        <td class="actions one">
                            @if ((await Authorization.AuthorizeAsync(User, Permission.PostsDelete)).Succeeded) {
                                <a class="remove" href="@Url.Action("Delete", "Post", new { id = post.Id })">
                                    <span class="glyphicon glyphicon-trash text-danger"></span>
                                </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>