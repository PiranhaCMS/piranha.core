@model Piranha.Areas.Manager.Models.PostEditModel
@using Piranha.Areas.Manager.Models
@{
    ViewBag.Title = "Edit post";
    ViewBag.Controller = "Page";

    var alias = (string)TempData["AliasSuggestion"];
}

@section script {
    <script type="text/javascript">

        var notificationTemplates = {
            error: {
                class: "alert-danger",
                body: '<h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Error!</h4>' +
                      '<p>The server encountered an error processing the request.</p>'
            },
            postSavedSuccessfully:{
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The post was successfully saved.</p>'
            },
            postPublishedSuccessfully:{
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The post was successfully <strong>published</strong>.</p>'
            },
            postUnpublishedSuccessfully:{
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The post was successfully <strong>unpublished</strong>.</p>'
            },
            missingTitle: {
                class: "alert-danger",
                body: '<h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Validation error!</h4>' +
                      '<p>The post could not be saved. <strong>Title</strong> is mandatory</p>'
            },
            missingCategory: {
                class: "alert-danger",
                body: '<h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Validation error!</h4>' +
                      '<p>The post could not be saved. <strong>Category</strong> is mandatory</p>'
            },
            aliasSuggestion: {
                body: '<h4 class="alert-heading"><i class="fas fa-info-circle"></i> Alias suggestion!</h4>' +
                      '<p>' +
                          'It seems you have changed the permalink of the post.<br />' +
                          'Do you want to create an <strong>Alias</strong> as suggested:<br />' +
                          'From <code>/{alias}</code> to <code>/{redirect}</code>' +
                      '</p>',
                buttons: [
                    {
                        text: "Dismiss",
                        class: "btn-primary"
                    },
                    {
                        text: "Create alias",
                        handler: function () {
                            var notis = piranha.notifications.findNotification(this);
                            piranha.notifications.dismiss(notis);

                            $("#alias-form").submit();
                        }
                    }
                ]
            },
            aliasSuggestionSuccess: {
                class: "alert-success",
                body: '<h4 class="alert-heading"><i class="fas fa-check"></i> Success!</h4>' +
                      '<p>The alias list was updated.</p>'
            }
        };

        $("#alias-form").on("submit", function (e) {

            e.preventDefault();
            $form = $(this);

            $.ajax({
                url: $form.attr('action'),
                type: $form.attr('method'),
                data: $form.serialize(),
                dataType: 'json',
                cache: false,
                success: function (data) {
                    piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.aliasSuggestionSuccess));                   
                },
                error: function () {
                    piranha.notifications.add(
                        piranha.notifications.create(
                            notificationTemplates.error));
                }
            });
        });

        $("#main-form").on("submit", function (e) {

            e.preventDefault();
            $form = $(this);

            // Copy content of all editable areas
            $form.find('.editor-area').each(function () {
                $('#' + $(this).attr('data-id')).val($(this).html());
            });

            if ($("#Title").val() === "") {
                piranha.notifications.add(
                    piranha.notifications.create(
                        notificationTemplates.missingTitle));
                return;
            }

            if ($("[name=SelectedCategory]").val() === "") {
                piranha.notifications.add(
                    piranha.notifications.create(
                        notificationTemplates.missingCategory));
                return;
            }

            // Show a loading spinner during the ajax call
            var icon = document.querySelector("#main-submit i");
            icon.className = "fa fa-spinner fa-spin";

            $.ajax({
                url: $form.attr('action'),
                type: $form.attr('method'),
                data: $form.serialize(),
                dataType: 'json',
                cache: false,
                success: function (data) {
                    // If a new page, redirect to the new edit view &
                    // flag the url so we can show a notification later
                    if (window.location.pathname !== data.location) {
                        window.location.href = data.location + "#saved";
                        return;
                    }

                    if (data.aliasSuggestion) {
                        var template = notificationTemplates.aliasSuggestion;

                        template.body = template.body.replace("{alias}", data.aliasSuggestion.alias)
                        template.body = template.body.replace("{redirect}", data.aliasSuggestion.redirect)

                        $("#alias-form #blogId").val(data.aliasSuggestion.blogId);
                        $("#alias-form #postId").val(data.aliasSuggestion.postId);
                        $("#alias-form #alias").val(data.aliasSuggestion.alias);
                        $("#alias-form #redirect").val(data.aliasSuggestion.redirect);

                        setTimeout(function () {
                            piranha.notifications.add(piranha.notifications.create(template), 0);
                        }, 500);
                    }

                    if (data.published) {
                        $("#Published").val(data.published);
                        $("#main-submit .btn-text").text("Update");

                        $("#submit-publish").addClass("hidden");
                        $("#submit-unpublish").removeClass("hidden");

                        piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.postPublishedSuccessfully));
                    } else if (data.unpublished) {
                        $("#Published").val("");
                        $("#main-submit .btn-text").text("Save");

                        $("#submit-unpublish").addClass("hidden");
                        $("#submit-publish").removeClass("hidden");

                        piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.postUnpublishedSuccessfully));
                    } else {                        
                        piranha.notifications.add(
                            piranha.notifications.create(
                                notificationTemplates.postSavedSuccessfully));
                    }
                },
                error: function () {
                    piranha.notifications.add(
                        piranha.notifications.create(
                            notificationTemplates.error));
                } 
            }).always(function () {
                $("form#main-form").trigger("reset-action");
                 icon.className = "fas fa-check";
            });
        });

         $(function () {
            // Check if we redirect back here from a new page creation
            if (window.location.hash === "#saved") {
                piranha.notifications.add(
                    piranha.notifications.create(
                        notificationTemplates.postSavedSuccessfully));

                // Remove our #saved flag from the url
                history.pushState("", document.title, window.location.pathname + window.location.search);
            }
        });

        $(document).on('click', '#submit-publish', function () {
            $('form#main-form').attr('action', '@Url.Action("Publish")').submit();
        });

        $(document).on('click', '#submit-unpublish', function () {
            $('form#main-form').attr('action', '@Url.Action("UnPublish")').submit();
        });

        $(document).on('click', '#btn-settings', function () {
            $('#panel-settings').slideToggle('fast');
            return false;
        });

        $(document).on('click', '#submit-alias', function (e) {
            e.preventDefault();
            $('form#alias-form').submit();
        });

        var defaultAction = $("form#main-form").attr('action');

        $("form#main-form").on("reset-action", function () {
            if ($('form#main-form').attr('action') !== defaultAction) {
                $('form#main-form').attr('action', defaultAction);
            }
        });

        document.getElementById('Title').focus();
    </script>
}

@using (var form = Html.BeginForm("AddAlias", "Post", FormMethod.Post, new { id="alias-form", @class = "form", role = "form" })) {
    @Html.Hidden("blogId", Model.BlogId)
    @Html.Hidden("postId", Model.Id)
    @Html.Hidden("alias", $"{Model.BlogSlug}/{alias}")
    @Html.Hidden("redirect", $"{Model.BlogSlug}/{Model.Slug}")
}

@using (var form = Html.BeginForm("Save", "Post", FormMethod.Post, new { @id = "main-form", @class = "form", @role = "form" })) {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.BlogId)
    @Html.HiddenFor(m => m.BlogSlug)
    @Html.HiddenFor(m => m.TypeId)

    <div class="row">
        <div class="col-sm-12 buttons buttons-fixed">
            <!-- Back -->
            <a href="@Url.Action("Edit", "Page", new { id = Model.BlogId })" class="btn btn-info btn-icon">
                <span class="fas fa-angle-left"></span>
            </a>
            <!-- Settings -->
            <button id="btn-settings" type="button" class="btn btn-primary btn-icon">
                <span class="fas fa-cog"></span>
            </button>

            <!-- Actions -->
            <div class="btn-group">
                <button id="main-submit" type="submit" class="btn btn-labeled btn-success">
                    <span class="btn-label">
                        <i class="fas fa-check"></i>
                    </span>
                    <span class="btn-text">
                        @if (Model.Published.HasValue) {
                            <text>Update</text>
                        } else {
                            <text>Save</text>
                        }
                    </span>                    
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown">
                    <span class="caret"></span>
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-right" role="menu">
                    @if (Model.Id != Guid.Empty) {
                        <li><a href="@Url.Action("Preview", new { id = Model.Id })" target="_preview">Preview</a></li>
                    }
                    @if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PostsPublish)).Succeeded) {
                        if (Model.Published.HasValue) {
                            <li><a id="submit-unpublish" href="#">Unpublish</a></li>
                            <li><a id="submit-publish" class="hidden" href="#">Publish now</a></li>
                        } else {
                            <li><a id="submit-unpublish" class="hidden" href="#">Unpublish</a></li>
                            <li><a id="submit-publish" href="#">Publish now</a></li>
                        }
                    }
                    @if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PostsDelete)).Succeeded) {
                        <li class="divider"></li>
                        <li><a href="@Url.Action("Delete", new { @id = Model.Id })" class="confirm-delete" data-message="Are you sure you want to delete the post?"><span class="text-danger">Delete post</span></a></li>
                    }
                </ul>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(ViewBag.Message)) {
        <div class="row">
            <div class="col-sm-12">
                <div class="@ViewBag.MessageCss">
                    @Html.Raw(ViewBag.Message)
                </div>
            </div>
        </div>
    }

    <div class="form-group">
        @Html.TextBoxFor(m => m.Title, new { @class = "form-control title", maxlength = 128, placeholder = "Your post title" })
        @Html.ValidationMessageFor(m => m.Title)
    </div>

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                <label>Category</label>
                <select class="form-control select2" name="SelectedCategory">
                    <option value=""></option>
                    @foreach (var category in Model.AllCategories) {
                        <option value="@category.Slug" @(Model.Category != null && category.Slug == Model.Category.Slug ? "selected=selected" : "")>@category.Title</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label>Tags</label>
                <select class="form-control select2" multiple="multiple" name="SelectedTags[]">
                    @foreach (var tag in Model.AllTags) {
                        <option value="@tag.Slug" @(Model.SelectedTags.Contains(tag.Slug) ? "selected=selected" : "")>@tag.Title</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div id="panel-settings" class="panel panel-default" style="display:none">
        <div class="panel-heading">
            <h3 class="panel-title">Settings</h3>
        </div>
        <div id="basic-settings" class="panel-body">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <label>Slug</label>
                        @Html.TextBoxFor(m => m.Slug, new { @class = "form-control", maxlength = 128, placeholder = "The unique slug" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Meta Keywords</label>
                        @Html.TextBoxFor(m => m.MetaKeywords, new { @class = "form-control small", maxlength = 128, placeholder = "Meta keywords" })
                    </div>
                    <div class="form-group">
                        <label>Meta Robots</label>
                        @Html.TextBoxFor(m => m.MetaRobots, new { @class = "form-control small", maxlength = 128, placeholder = "Meta robots" })
                    </div>
                    @if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PostsPublish)).Succeeded) {
                        <div class="form-group">
                            <label>Publish date</label>
                            <div class="input-group date datetimepicker">
                                <input type="text" id="Published" name="Published" class="form-control small" value="@(Model.Published.HasValue ? Model.Published.Value.ToString("yyyy-MM-dd HH:mm") : "")">
                                <span class="input-group-addon">
                                    <span class="fas fa-calendar-alt"></span>
                                </span>
                            </div>
                        </div>
                    } else {
                        @Html.HiddenFor(m => m.Published)
                    }
                    @if (Model.PostType.Routes.Count > 1) {
                        <div class="form-group">
                            <label>Route</label>
                            <select name="Route" class="form-control small">
                                @foreach (var item in Model.PostType.Routes) {
                                    <option value="@item.Route" @(Model.Route == item.Route ? "selected=selected" : "")>@item.Title</option>
                                }
                            </select>
                        </div>
                    }
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Meta description</label>
                        @Html.TextAreaFor(m => m.MetaDescription, new { @class = "form-control small count-me", rows = 5, maxlength = 256, placeholder = "Meta description", style = "height:82px" })
                        <p>@(Model.MetaDescription != null ? Model.MetaDescription.Length : 0)/255</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading">
            @for (var n = Model.Regions.Count - 1; n >= 0; n--) {
                var primary = n == 0 && !Model.PostType.UseBlocks;
                <button class="btn btn-sm btn-secondary pull-right btn-toggle @(primary ? "btn-primary" : "")" data-target="#region-@Model.Regions[n].Id">@Model.Regions[n].Title</button>
            }
            @if (Model.PostType.UseBlocks) {
                <button class="btn btn-sm btn-secondary pull-right btn-toggle btn-primary" data-target="#page-blocks">Content</button>
            }
            <h3 class="panel-title">Content</h3>
        </div>
        @if (Model.PostType.UseBlocks) {
            <div id="page-blocks" class="panel-body">
                <div class="page-blocks-body">
                    <div class="sortable">
                        <div class="unsortable">
                            <div class="block-add">
                                <div class="block-add-dialog">
                                    @foreach (var category in Piranha.App.Blocks.GetCategories()) {
                                        <label>@category</label>
                                        @foreach (var block in Piranha.App.Blocks.GetByCategory(category)) {
                                            <a href="#" data-typename="@block.TypeName"><i class="@block.Icon"></i>@block.Name</a>
                                        }
                                    }
                                </div>
                                <a href="#" class="block-add-toggle">
                                    <hr><span class="fas fa-plus"></span>
                                </a>
                            </div>
                        </div>
                        @Html.EditorFor(m => m.Blocks)
                    </div>
                    @if (Model.Blocks.Count == 0) {
                        <div class="block-info content-preview">
                            <p>
                                It looks like this post doesn't have any content yet! To get started just press the
                                plus above to add your first block.
                            </p>
                        </div>
                    }
                </div>
            </div>
        }
        @for (var n = 0; n < Model.Regions.Count; n++) {
            var primary = n == 0 && !Model.PostType.UseBlocks;
            <div id="region-@Model.Regions[n].Id" class="panel-body" @(!primary ? "style=display:none" : "")>
                @Html.HiddenFor(m => m.Regions[n].Id)
                @Html.HiddenFor(m => m.Regions[n].Title)
                @Html.HiddenFor(m => m.Regions[n].CLRType)
                @Html.EditorFor(m => m.Regions[n], Model.Regions[n].GetType().Name, new { 
                    pageTypeId = Model.PostType.Id,
                    regionTypeId = Model.Regions[n].Id,
                    regionIndex = n,
                    contentType = "post"
                })
            </div>
        }
    </div>
}